package com.sunshine.spring.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.junit.*;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

/**
 * Description: usering hsqldb for the database.
 * User: sunshine
 * Date: 14-3-18
 * To change this template use File | Settings | File Templates.
 */
public class JdbcTemplateTest {

    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String username = "sa";
        String password = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Test
    public void test() {
        //1.声明SQL
        String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                //2.处理结果集
                String value = rs.getString("TABLE_NAME");
                System.out.println("Column TABLENAME:" + value);
            }
        });
    }

    @Test
    public void testPpreparedStatement1() {
        int count = jdbcTemplate.execute(new PreparedStatementCreator() {
                                             @Override
                                             public PreparedStatement createPreparedStatement(Connection conn)
                                                     throws SQLException {
                                                 return conn.prepareStatement("select count(*) from test");
                                             }}, new PreparedStatementCallback<Integer>() {
                                             @Override
                                             public Integer doInPreparedStatement(PreparedStatement pstmt)
                                                     throws SQLException, DataAccessException {
                                                 pstmt.execute();
                                                 ResultSet rs = pstmt.getResultSet();
                                                 rs.next();
                                                 return rs.getInt(1);
                                             }});
        Assert.assertEquals(0, count);
    }

    @Test
    public void testCURD() {
        insert();
        delete();
        update();
        select();
    }

    /**
     * SimpleJdbcInsert是Spring JDBC提供的抽象框架，用于插入数据，根据数据库元数据进行插入数据，本类用于简化插入操作
     * 另外還有SimpleJdbcCall，用于调用存储过程及自定义函数，本类用于简化存储过程及自定义函数调用
     */
    @Test
    public void testSimpleJdbcInsert() {
        SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        Map<String, Object> args = new HashMap<String, Object>();
        args.put("name", "name5");
        insert.compile();
        //1.普通插入
        insert.execute(args);
        Assert.assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test"));
        //2.插入时获取主键值
        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        Number id = insert.executeAndReturnKey(args);
        Assert.assertEquals(1, id);
        //3.批处理
        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        int[] updateCount = insert.executeBatch(new Map[] {args, args, args});
        Assert.assertEquals(1, updateCount[0]);
        Assert.assertEquals(5, jdbcTemplate.queryForInt("select count(*) from test"));
    }
    /**
     * 执行test前执行，创建内存表,每一个test都会执行
     */
    @Before
    public void setUp() {
        String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " + "name varchar(100))";
        jdbcTemplate.update(createTableSql);
    }
    /**
     * 执行test后执行，删除内存表，每一个test都会执行
     */
    @After
    public void tearDown() {
        String dropTableSql = "drop table test";
        jdbcTemplate.execute(dropTableSql);
    }



    private void insert() {
        jdbcTemplate.update("insert into test(name) values('name1')");
        jdbcTemplate.update("insert into test(name) values('name2')");
        Assert.assertEquals(2, jdbcTemplate.queryForInt("select count(*) from test"));
    }

    private void delete() {
        jdbcTemplate.update("delete from test where name=?", new Object[]{"name2"});
        Assert.assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test"));
    }

    private void update() {
        jdbcTemplate.update("update test set name='name3' where name=?", new Object[]{"name1"});
        Assert.assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test where name='name3'"));
    }

    private void select() {
        jdbcTemplate.query("select * from test", new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                System.out.print("====id:" + rs.getInt("id"));
                System.out.println(",name:" + rs.getString("name"));
            }
        });
    }
}
